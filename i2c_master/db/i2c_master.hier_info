|i2c_master
rst => rst.IN2
clk => clk_data.CLK
clk => scl~reg0.CLK
read => read.IN2
sda <> sda
scl << scl~reg0.DB_MAX_OUTPUT_PORT_TYPE
data_send_master[0] => data_send_master[0].IN1
data_send_master[1] => data_send_master[1].IN1
data_send_master[2] => data_send_master[2].IN1
data_send_master[3] => data_send_master[3].IN1
data_send_master[4] => data_send_master[4].IN1
data_send_master[5] => data_send_master[5].IN1
data_send_master[6] => data_send_master[6].IN1
data_send_master[7] => data_send_master[7].IN1
data_send_master_enable => data_send_master_enable.IN2
slave_address[0] => slave_address[0].IN1
slave_address[1] => slave_address[1].IN1
slave_address[2] => slave_address[2].IN1
slave_address[3] => slave_address[3].IN1
slave_address[4] => slave_address[4].IN1
slave_address[5] => slave_address[5].IN1
slave_address[6] => slave_address[6].IN1
data_receive_master[0] << i2c_master_datapath:u2.data_receive_master
data_receive_master[1] << i2c_master_datapath:u2.data_receive_master
data_receive_master[2] << i2c_master_datapath:u2.data_receive_master
data_receive_master[3] << i2c_master_datapath:u2.data_receive_master
data_receive_master[4] << i2c_master_datapath:u2.data_receive_master
data_receive_master[5] << i2c_master_datapath:u2.data_receive_master
data_receive_master[6] << i2c_master_datapath:u2.data_receive_master
data_receive_master[7] << i2c_master_datapath:u2.data_receive_master
data_receive_master_enable << i2c_master_datapath:u2.data_receive_master_enable
error_master << i2c_master_controlpath:u1.error_master


|i2c_master|i2c_master_controlpath:u1
read => always0.IN0
rst => error_master_reg.ACLR
rst => rw_reg.ACLR
rst => present_state~3.DATAIN
clk1 => error_master_reg.CLK
clk1 => rw_reg.CLK
clk1 => present_state~1.DATAIN
read_data => rw_reg.OUTPUTSELECT
read_data => present_state.OUTPUTSELECT
read_data => present_state.OUTPUTSELECT
read_data => rw_reg.DATAB
read_data => error_master_reg.OUTPUTSELECT
count[0] => Equal0.IN2
count[1] => Equal0.IN1
count[2] => Equal0.IN0
count_receive[0] => Equal1.IN2
count_receive[1] => Equal1.IN1
count_receive[2] => Equal1.IN0
data_send_master_enable => always0.IN1
state[0] <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
state[2] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
rw <= rw_reg.DB_MAX_OUTPUT_PORT_TYPE
ack => rw_reg.OUTPUTSELECT
ack => Selector5.IN3
ack => Selector1.IN1
ack => error_master_reg.DATAA
ack => Selector4.IN2
error_master <= error_master_reg.DB_MAX_OUTPUT_PORT_TYPE


|i2c_master|i2c_master_datapath:u2
rst => data_send_master_reg[0].ACLR
rst => data_send_master_reg[1].ACLR
rst => data_send_master_reg[2].ACLR
rst => data_send_master_reg[3].ACLR
rst => data_send_master_reg[4].ACLR
rst => data_send_master_reg[5].ACLR
rst => data_send_master_reg[6].ACLR
rst => data_send_master_reg[7].ACLR
rst => slave_address_reg[0].ACLR
rst => slave_address_reg[1].ACLR
rst => slave_address_reg[2].ACLR
rst => slave_address_reg[3].ACLR
rst => slave_address_reg[4].ACLR
rst => slave_address_reg[5].ACLR
rst => slave_address_reg[6].ACLR
rst => count_reg[0].ACLR
rst => count_reg[1].ACLR
rst => count_reg[2].ACLR
rst => sda_out_reg.PRESET
rst => read_reg.ACLR
rst => data_receive_master_enable_reg.ACLR
rst => data_receive_master_reg[0].ACLR
rst => data_receive_master_reg[1].ACLR
rst => data_receive_master_reg[2].ACLR
rst => data_receive_master_reg[3].ACLR
rst => data_receive_master_reg[4].ACLR
rst => data_receive_master_reg[5].ACLR
rst => data_receive_master_reg[6].ACLR
rst => data_receive_master_reg[7].ACLR
rst => count_receive_reg[0].ACLR
rst => count_receive_reg[1].ACLR
rst => count_receive_reg[2].ACLR
rst => rstscl_reg.ACLR
rst => ack_reg.ACLR
clk1 => data_send_master_reg[0].CLK
clk1 => data_send_master_reg[1].CLK
clk1 => data_send_master_reg[2].CLK
clk1 => data_send_master_reg[3].CLK
clk1 => data_send_master_reg[4].CLK
clk1 => data_send_master_reg[5].CLK
clk1 => data_send_master_reg[6].CLK
clk1 => data_send_master_reg[7].CLK
clk1 => slave_address_reg[0].CLK
clk1 => slave_address_reg[1].CLK
clk1 => slave_address_reg[2].CLK
clk1 => slave_address_reg[3].CLK
clk1 => slave_address_reg[4].CLK
clk1 => slave_address_reg[5].CLK
clk1 => slave_address_reg[6].CLK
clk1 => count_reg[0].CLK
clk1 => count_reg[1].CLK
clk1 => count_reg[2].CLK
clk1 => sda_out_reg.CLK
clk1 => read_reg.CLK
clk1 => data_receive_master_enable_reg.CLK
clk1 => data_receive_master_reg[0].CLK
clk1 => data_receive_master_reg[1].CLK
clk1 => data_receive_master_reg[2].CLK
clk1 => data_receive_master_reg[3].CLK
clk1 => data_receive_master_reg[4].CLK
clk1 => data_receive_master_reg[5].CLK
clk1 => data_receive_master_reg[6].CLK
clk1 => data_receive_master_reg[7].CLK
clk1 => count_receive_reg[0].CLK
clk1 => count_receive_reg[1].CLK
clk1 => count_receive_reg[2].CLK
clk1 => rstscl_reg.CLK
clk1 => ack_reg.CLK
read => always0.IN0
read => always0.IN0
data_send_master_enable => always0.IN1
data_send_master_enable => always0.IN1
data_send_master[0] => data_send_master_reg.DATAB
data_send_master[1] => data_send_master_reg.DATAB
data_send_master[2] => data_send_master_reg.DATAB
data_send_master[3] => data_send_master_reg.DATAB
data_send_master[4] => data_send_master_reg.DATAB
data_send_master[5] => data_send_master_reg.DATAB
data_send_master[6] => data_send_master_reg.DATAB
data_send_master[7] => data_send_master_reg.DATAB
data_receive_master[0] <= data_receive_master_reg[0].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[1] <= data_receive_master_reg[1].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[2] <= data_receive_master_reg[2].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[3] <= data_receive_master_reg[3].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[4] <= data_receive_master_reg[4].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[5] <= data_receive_master_reg[5].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[6] <= data_receive_master_reg[6].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master[7] <= data_receive_master_reg[7].DB_MAX_OUTPUT_PORT_TYPE
state[0] => Mux2.IN8
state[0] => Mux3.IN8
state[0] => Mux4.IN8
state[0] => Mux5.IN8
state[0] => Mux6.IN4
state[0] => Decoder2.IN2
state[0] => Equal1.IN0
state[0] => Equal2.IN1
state[0] => Equal3.IN2
state[0] => Equal4.IN2
state[0] => Equal5.IN2
state[1] => Mux2.IN7
state[1] => Mux3.IN7
state[1] => Mux4.IN7
state[1] => Mux5.IN7
state[1] => Mux6.IN3
state[1] => Decoder2.IN1
state[1] => Equal1.IN2
state[1] => Equal2.IN2
state[1] => Equal3.IN0
state[1] => Equal4.IN1
state[1] => Equal5.IN1
state[2] => Mux2.IN6
state[2] => Mux3.IN6
state[2] => Mux4.IN6
state[2] => Mux5.IN6
state[2] => Mux6.IN2
state[2] => Decoder2.IN0
state[2] => Equal1.IN1
state[2] => Equal2.IN0
state[2] => Equal3.IN1
state[2] => Equal4.IN0
state[2] => Equal5.IN0
count[0] <= count_reg[0].DB_MAX_OUTPUT_PORT_TYPE
count[1] <= count_reg[1].DB_MAX_OUTPUT_PORT_TYPE
count[2] <= count_reg[2].DB_MAX_OUTPUT_PORT_TYPE
read_data <= read_reg.DB_MAX_OUTPUT_PORT_TYPE
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => data_receive_master_reg.DATAB
sda_in => ack_reg.DATAB
sda_out <= sda_out_reg.DB_MAX_OUTPUT_PORT_TYPE
rstscl <= rstscl_reg.DB_MAX_OUTPUT_PORT_TYPE
slave_address[0] => slave_address_reg.DATAB
slave_address[0] => slave_address_reg.DATAB
slave_address[1] => slave_address_reg.DATAB
slave_address[1] => slave_address_reg.DATAB
slave_address[2] => slave_address_reg.DATAB
slave_address[2] => slave_address_reg.DATAB
slave_address[3] => slave_address_reg.DATAB
slave_address[3] => slave_address_reg.DATAB
slave_address[4] => slave_address_reg.DATAB
slave_address[4] => slave_address_reg.DATAB
slave_address[5] => slave_address_reg.DATAB
slave_address[5] => slave_address_reg.DATAB
slave_address[6] => slave_address_reg.DATAB
slave_address[6] => slave_address_reg.DATAB
ack <= ack_reg.DB_MAX_OUTPUT_PORT_TYPE
count_receive[0] <= count_receive_reg[0].DB_MAX_OUTPUT_PORT_TYPE
count_receive[1] <= count_receive_reg[1].DB_MAX_OUTPUT_PORT_TYPE
count_receive[2] <= count_receive_reg[2].DB_MAX_OUTPUT_PORT_TYPE
data_receive_master_enable <= data_receive_master_enable_reg.DB_MAX_OUTPUT_PORT_TYPE


